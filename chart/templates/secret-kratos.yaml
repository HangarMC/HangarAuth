# We don't use the fullname template here because we need the configmap names to be predictable as we can't use {{ .Release.Name }} in values.yaml when configuring Kratos
# This entire file could probably be a lot cleaner with Helm range functions but I can't be bothered
apiVersion: v1
kind: ConfigMap
metadata:
  name: hangarauth-kratos-hooks
  labels:
    {{- include "hangarauth.labels" . | nindent 4 }}
data:
{{ (.Files.Glob "kratos/hooks/*").AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hangarauth-kratos-schemas
  labels:
    {{- include "hangarauth.labels" . | nindent 4 }}
data:
{{ (.Files.Glob "kratos/schemas/*").AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hangarauth-kratos-email-recovery-invalid
  labels:
    {{- include "hangarauth.labels" . | nindent 4 }}
data:
{{ (.Files.Glob "kratos/templates/recovery/invalid/*").AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hangarauth-kratos-email-recovery-valid
  labels:
    {{- include "hangarauth.labels" . | nindent 4 }}
data:
{{ (.Files.Glob "kratos/templates/recovery/valid/*").AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hangarauth-kratos-email-verification-invalid
  labels:
    {{- include "hangarauth.labels" . | nindent 4 }}
data:
{{ (.Files.Glob "kratos/templates/verification/invalid/*").AsConfig | indent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hangarauth-kratos-email-verification-valid
  labels:
    {{- include "hangarauth.labels" . | nindent 4 }}
data:
{{ (.Files.Glob "kratos/templates/verification/valid/*").AsConfig | indent 2 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: hangarauth-kratos-config
  labels:
    {{- include "hangarauth.labels" . | nindent 4 }}
type: Opaque
stringData:
  kratos.yaml: |
    dsn: "postgres://{{ .Values.kratos.config.postgresql.username }}:{{ .Values.kratos.config.postgresql.password }}@{{ .Values.kratos.config.postgresql.hostname }}:{{ .Values.kratos.config.postgresql.port }}/{{ .Values.kratos.config.postgresql.database }}{{ .Values.kratos.config.postgresql.options }}"
    serve:
      public:
        base_url: {{ .Values.kratos.config.publicHost }}/kratos
        cors:
          enabled: true
          allowed_origins:
            - {{ .Values.kratos.config.publicHost }}
      admin:
        base_url: http://127.0.0.1:4434/
    cookies:
      domain: {{ .Values.kratos.config.domain }}
    session:
      lifespan: 720h # 30 days
    selfservice:
      default_browser_return_url: {{ .Values.kratos.config.publicHost }}/
      allowed_return_urls:
        - {{ .Values.kratos.config.publicHost }}/
      methods:
        password:
          enabled: true
        oidc:
          enabled: true
        link:
          enabled: true
          config:
            lifespan: 1h
        totp:
          enabled: true
          config:
            issuer: HangarAuth
        lookup_secret:
          enabled: true
        webauthn:
          enabled: true
          config:
            passwordless: true
            rp:
              id: {{ .Values.kratos.config.domain }}
              origin: {{ .Values.kratos.config.publicHost }}
              display_name: HangarAuth
      flows:
        error:
          ui_url: {{ .Values.kratos.config.publicHost }}/error
        settings:
          ui_url: {{ .Values.kratos.config.publicHost }}/account/settings
          privileged_session_max_age: 15m
          after:
            profile:
              hooks:
                - hook: web_hook
                  config:
                    method: POST
                    url: "http://hangar-backend:8080/sync"
                    body: file:///etc/hangarauth/hooks/settings-after-profile.jsonnet
                    auth:
                      type: api_key
                      config:
                        in: header
                        name: X-Kratos-Hook-Api-Key
                        value: "{{ .Values.backend.config.invite.apiKey }}"
        recovery:
          enabled: true
          ui_url: {{ .Values.kratos.config.publicHost }}/account/reset
        verification:
          enabled: true
          ui_url: {{ .Values.kratos.config.publicHost }}/account/verify
          after:
            default_browser_return_url: {{ .Values.kratos.config.publicHost }}/
        logout:
          after:
            default_browser_return_url: {{ .Values.kratos.config.publicHost }}/?loggedOut
        login:
          ui_url: {{ .Values.kratos.config.publicHost }}/account/login
          lifespan: 10m
        registration:
          lifespan: 10m
          ui_url: {{ .Values.kratos.config.publicHost }}/account/signup
          after:
            default_browser_return_url: "{{ .Values.kratos.config.publicHost }}/account/settings?new=true"
            password:
              hooks:
                - hook: session
                - hook: web_hook
                  config:
                    method: POST
                    url: "{{ .Values.frontend.config.backendHost }}/invite/use"
                    body: file:///etc/hangarauth/hooks/registration-after-profile.jsonnet
                    can_interrupt: true
                    auth:
                      type: api_key
                      config:
                        in: header
                        name: X-Kratos-Hook-Api-Key
                        value: "{{ .Values.backend.config.invite.apiKey }}"
            oidc:
              hooks:
                - hook: session
                - hook: web_hook
                  config:
                    method: POST
                    url: "{{ .Values.frontend.config.backendHost }}/invite/use"
                    body: file:///etc/hangarauth/hooks/registration-after-profile.jsonnet
                    can_interrupt: true
                    auth:
                      type: api_key
                      config:
                        in: header
                        name: X-Kratos-Hook-Api-Key
                        value: "{{ .Values.backend.config.invite.apiKey }}"
            webauthn:
              hooks:
                - hook: session
                - hook: web_hook
                  config:
                    method: POST
                    url: "{{ .Values.frontend.config.backendHost }}/invite/use"
                    body: file:///etc/hangarauth/hooks/registration-after-profile.jsonnet
                    can_interrupt: true
                    auth:
                      type: api_key
                      config:
                        in: header
                        name: X-Kratos-Hook-Api-Key
                        value: "{{ .Values.backend.config.invite.apiKey }}"
    log:
      level: debug
      format: text
      leak_sensitive_values: true
    secrets:
      cookie:
        - "{{ .Values.kratos.config.cookieSecret }}"
    hashers:
      argon2:
        parallelism: 1
        memory: 128MB
        iterations: 2
        salt_length: 16
        key_length: 16
    identity:
      default_schema_id: identity_v1
      schemas:
        - id: identity_v1
          url: file:///etc/hangarauth/schemas/identity.v1.schema.json
    courier:
      smtp:
        connection_uri: "smtps://{{ .Values.kratos.config.smtp.username }}:{{ .Values.kratos.config.smtp.password }}@{{ .Values.kratos.config.smtp.hostname }}:{{ .Values.kratos.config.smtp.port }}/{{ .Values.kratos.config.smtp.options }}"
        from_address: "{{ .Values.kratos.config.smtp.from }}"
      template_override_path: /etc/hangerauth/email
