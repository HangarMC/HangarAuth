name: Deploy

on:
  # allow manual dispatch
  workflow_dispatch:
  push:
    branches:
      - v3

concurrency:
  group: ${{ github.ref }}-deploy
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '12'

      - name: Cache Yarn
        uses: actions/cache@v2
        with:
          path: "~/.cache/yarn"
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install frontend deps
        run: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn

      - name: Lint frontend
        run: yarn lint

      - name: Build frontend
        env:
          # keep these in sync with compose!
          host: "0.0.0.0"
          publicHost: "https://hangar-auth.benndorf.dev"
          SECRETS_COOKIE: "supersecuresupersecure"
          cookieHttps: "true"
          kratosPublic: "https://hangar-auth.benndorf.dev/kratos"
          hydraPublic: "https://hangar-oauth.benndorf.dev"
          kratos: "http://kratos:4433"
          hydraAdmin: "http://hydra:4445"
          hangarHost: "https://hangar.benndorf.dev"
          DEBUG: "nuxt:*"
        run: yarn build

      - name: SSH
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.DOCKER_HOST_SSH_KEY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.CR_USER }}
          password: ${{ secrets.CR_PAT }}

      - name: Docker
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PW: ${{ secrets.POSTGRES_PW }}
        working-directory: .
        run: |
          echo ${{ secrets.DOCKER_HOST_SSH_SIG }} > ~/.ssh/known_hosts
          cd docker/deployment
          docker-compose build
          docker-compose push
          DOCKER_HOST="${{ secrets.DOCKER_HOST }}" docker stack deploy --with-registry-auth --compose-file=docker-compose.yml hangar_auth
